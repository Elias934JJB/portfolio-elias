---
import { basics } from "@cv";
import Section from "@/components/Section.astro";
import Mail from "@/icons/Mail.astro";
import Phone from "@/icons/Phone.astro";
import X from "@/icons/X.astro";
import LinkedIn from "@/icons/LinkedIn.astro";
import GitHub from "@/icons/GitHub.astro";
import WorldMap from "@/icons/WorldMap.astro";
import type { SocialIcon } from "@/types";
import type { Profiles } from "../../cv.d";

const { name, label, location, profiles, phone, email } = basics;
const { city, region } = location;

const SOCIAL_ICONS: SocialIcon = {
	GitHub,
	LinkedIn,
	X,
};

const linkedInfo = (profiles as Profiles[]).find(({ network }) => network === "LinkedIn");
const linkedUrl = linkedInfo?.url;

const printInfo = [email, phone, linkedUrl].filter(Boolean).join(" • ");
---

<Section className={Astro.props.className} title="">
	<div class="container flex flex-row gap-8 md:gap-12 print:grid print:grid-cols-2 print:gap-5">
		<div class="info flex-1">
			<h1>{name}</h1>
			<h2>{label}</h2>
			<span class="flex flex-col gap-1">
				{email && (
					<a href={`mailto:${email}`} title={`Envoyer un mail à ${name}`} target="_blank" rel="noopener noreferrer">
						<Mail />
					</a>
				)}
				{phone && (
					<a href={`tel:${phone}`} title={`Appeler ${name} au ${phone}`} target="_blank" rel="noopener noreferrer">
						<Phone />
					</a>
				)}
				{profiles.map(({ network, url }) => {
					const Icon = SOCIAL_ICONS[network];
					return (
						<a href={url} title={`Voir le profil ${name} sur ${network}`} target="_blank" rel="noopener noreferrer">
							<Icon />
						</a>
					);
				})}
			</span>
			<footer class="mt-2 flex gap-1 text-sm">
				{printInfo}
			</footer>
			<div class="mt-4">
				<a href="/portfolio-elias/veille" class="inline-block rounded-lg bg-skin-hue px-4 py-2 text-white font-semibold shadow hover:bg-skin-hue/90 transition-colors mr-2">
					Veille Technologique
				</a>
				<a href="/portfolio-elias/stage" class="inline-block rounded-lg bg-skin-hue px-4 py-2 text-white font-semibold shadow hover:bg-skin-hue/90 transition-colors">
					Stages IRIS
				</a>
			</div>
		</div>
		<figure class="print:hidden w-fit relative">
			<img class="shadow-lg shadow-skin-hues" src="/portfolio-elias/me_avatar.jpg" alt={name} />
			<div class="pointer-events-none absolute -inset-2">
				<div class="absolute -inset-y-8 right-0 w-px bg-skin-hue/50 [mask-image:linear-gradient(to_top,transparent,white_4rem,white_calc(100%-4rem),transparent)]"></div>
				<div class="absolute -inset-y-8 left-0 w-px bg-skin-hue/50 [mask-image:linear-gradient(to_top,transparent,white_4rem,white_calc(100%-4rem),transparent)]"></div>
				<div class="absolute -inset-x-8 bottom-0 h-px bg-skin-hue/50 [mask-image:linear-gradient(to_left,transparent,white_4rem,white_calc(100%-4rem),transparent)]"></div>
				<div class="absolute -inset-x-8 top-0 h-px bg-skin-hue/50 [mask-image:linear-gradient(to_left,transparent,white_4rem,white_calc(100%-4rem),transparent)]"></div>
			</div>
		</figure>
	</div>
</Section>

<style>
	.info {
		@apply flex flex-col gap-1 pr-8 print:gap-0 print:pr-0;
	}

	h1 {
		@apply text-4xl font-bold print:text-3xl;
	}

	h2 {
		@apply text-balance text-base text-skin-muted print:text-lg;
	}

	img {
		@apply aspect-square w-32 rounded-2xl bg-cover;
	}

	span {
		@apply flex items-center gap-1 text-xs text-skin-hue ;
	}

	footer {
		@apply mt-2 flex gap-1 text-sm ;
	}

	footer a, footer button {
		@apply inline-flex size-8 items-center justify-center rounded-md p-1 transition-all duration-500 ease-linear text-skin-hue hover:bg-skin-button-accent hover:text-skin-inverted;
	}

	@media (width <= 700px) {
		.container {
			flex-direction: column-reverse;
		}

		.info {
			@apply md:items-center md:justify-center pr-0 ;
		}

		figure {
			@apply flex md:items-center md:justify-center;
		}

		h2 {
			text-wrap: balance;
		}

		figure {
			@apply md:mx-auto;
		}
	}
</style>

<script>
	const select = document.getElementById("themeSwitch") as HTMLSelectElement;
	const theme = localStorage.getItem("theme");
	const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";

	if (theme !== null) {
		select.value = theme;
	} else {
		select.value = systemTheme;
	}

	function updateTheme(value: string) {
		const theme = value === "system" ? systemTheme : value;
		document.documentElement.classList.remove("light", "dark");
		document.documentElement.classList.add(theme);
		localStorage.setItem("theme", value);
	}

	updateTheme(select.value);

	select.addEventListener("change", (event: Event) => {
		const select = event.target as HTMLSelectElement;
		updateTheme(select.value);
	});

	// Deshabilitar modo oscuro al imprimir
	window.addEventListener("beforeprint", () => {
		document.documentElement.classList.remove("dark");
	});

	// Restaurar el modo oscuro después de imprimir
	window.addEventListener("afterprint", () => {
		if (select.value === "dark" || (select.value === "system" && systemTheme === "dark")) {
			document.documentElement.classList.add("dark");
		}
	});
</script>
